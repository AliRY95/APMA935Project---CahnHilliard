// Cahn-Hilliard Equation of the form $\phi_t = \gamma[\Delta f - \Delta^2 \phi]$
load "iovtk"
int[int] Order=[1];
verbosity = 0;

// PARAMETERS
string Method = "OD2";
real gamma = 0.0001; // Diffusion Coefficient
real epsi = 0.01; //
func real f (real var){return (var^3 - var)/epsi^2;} // Potential Function
func real fprime (real var){return (3*var^2 - 1)/epsi^2;} // Potential Function Derivative
func phi0 =
  -0.0020*exp(-1000*((x-0.1)^2 + (y-0.1)^2)) +
  +0.0100*exp(-0500*((x-0.2)^2 + (y-0.1)^2)) +
  +0.0070*exp(-0800*((x-0.3)^2 + (y-0.1)^2)) +
  -0.0090*exp(-1200*((x-0.4)^2 + (y-0.1)^2)) +
  -0.0100*exp(-0100*((x-0.5)^2 + (y-0.1)^2)) +
  +0.0075*exp(-0200*((x-0.6)^2 + (y-0.1)^2)) +
  -0.0101*exp(-2000*((x-0.7)^2 + (y-0.1)^2)) +
  +0.0040*exp(-0850*((x-0.8)^2 + (y-0.1)^2)) +
  -0.0070*exp(-1400*((x-0.9)^2 + (y-0.1)^2)) +

  -0.0500*exp(-5000*((x-0.1)^2 + (y-0.2)^2)) +
  -0.0045*exp(-0200*((x-0.2)^2 + (y-0.2)^2)) +
  +0.0070*exp(-0860*((x-0.3)^2 + (y-0.2)^2)) +
  +0.0120*exp(-0450*((x-0.4)^2 + (y-0.2)^2)) +
  -0.0100*exp(-1100*((x-0.5)^2 + (y-0.2)^2)) +
  -0.0075*exp(-0900*((x-0.6)^2 + (y-0.2)^2)) +
  -0.0101*exp(-0800*((x-0.7)^2 + (y-0.2)^2)) +
  +0.0088*exp(-1850*((x-0.8)^2 + (y-0.2)^2)) +
  +0.0085*exp(-0600*((x-0.9)^2 + (y-0.2)^2)) +

  -0.0008*exp(-0500*((x-0.1)^2 + (y-0.3)^2)) +
  +0.0088*exp(-1500*((x-0.2)^2 + (y-0.3)^2)) +
  +0.0070*exp(-1000*((x-0.3)^2 + (y-0.3)^2)) +
  +0.0100*exp(-0500*((x-0.4)^2 + (y-0.3)^2)) +
  -0.0050*exp(-1400*((x-0.5)^2 + (y-0.3)^2)) +
  -0.0110*exp(-0180*((x-0.6)^2 + (y-0.3)^2)) +
  +0.0010*exp(-0200*((x-0.7)^2 + (y-0.3)^2)) +
  -0.0098*exp(-0560*((x-0.8)^2 + (y-0.3)^2)) +
  -0.0220*exp(-0900*((x-0.9)^2 + (y-0.3)^2)) +

  -0.0100*exp(-0990*((x-0.1)^2 + (y-0.4)^2)) +
  +0.0188*exp(-1500*((x-0.2)^2 + (y-0.4)^2)) +
  -0.0066*exp(-0460*((x-0.3)^2 + (y-0.4)^2)) +
  +0.0180*exp(-0780*((x-0.4)^2 + (y-0.4)^2)) +
  +0.0075*exp(-0450*((x-0.5)^2 + (y-0.4)^2)) +
  -0.0110*exp(-0480*((x-0.6)^2 + (y-0.4)^2)) +
  +0.0090*exp(-0110*((x-0.7)^2 + (y-0.4)^2)) +
  +0.0008*exp(-0360*((x-0.8)^2 + (y-0.4)^2)) +
  -0.0020*exp(-0750*((x-0.9)^2 + (y-0.4)^2)) +

  +0.0350*exp(-0800*((x-0.1)^2 + (y-0.5)^2)) +
  -0.0110*exp(-0430*((x-0.2)^2 + (y-0.5)^2)) +
  -0.0040*exp(-1000*((x-0.3)^2 + (y-0.5)^2)) +
  +0.0110*exp(-0710*((x-0.4)^2 + (y-0.5)^2)) +
  -0.0099*exp(-0400*((x-0.5)^2 + (y-0.5)^2)) +
  +0.0087*exp(-0100*((x-0.6)^2 + (y-0.5)^2)) +
  -0.0410*exp(-1200*((x-0.7)^2 + (y-0.5)^2)) +
  -0.0030*exp(-0800*((x-0.8)^2 + (y-0.5)^2)) +
  -0.0001*exp(-0130*((x-0.9)^2 + (y-0.5)^2)) +

  -0.0072*exp(-1150*((x-0.1)^2 + (y-0.6)^2)) +
  +0.0010*exp(-0430*((x-0.2)^2 + (y-0.6)^2)) +
  -0.0045*exp(-1000*((x-0.3)^2 + (y-0.6)^2)) +
  +0.0080*exp(-0165*((x-0.4)^2 + (y-0.6)^2)) +
  -0.0049*exp(-0840*((x-0.5)^2 + (y-0.6)^2)) +
  +0.0187*exp(-0420*((x-0.6)^2 + (y-0.6)^2)) +
  +0.0040*exp(-0200*((x-0.7)^2 + (y-0.6)^2)) +
  -0.0130*exp(-0370*((x-0.8)^2 + (y-0.6)^2)) +
  +0.0051*exp(-0630*((x-0.9)^2 + (y-0.6)^2)) +

  -0.0182*exp(-0250*((x-0.1)^2 + (y-0.7)^2)) +
  +0.0102*exp(-0470*((x-0.2)^2 + (y-0.7)^2)) +
  -0.0140*exp(-0750*((x-0.3)^2 + (y-0.7)^2)) +
  +0.0065*exp(-1250*((x-0.4)^2 + (y-0.7)^2)) +
  +0.0099*exp(-1200*((x-0.5)^2 + (y-0.7)^2)) +
  +0.0032*exp(-0250*((x-0.5)^2 + (y-0.7)^2)) +
  -0.0310*exp(-1700*((x-0.7)^2 + (y-0.7)^2)) +
  -0.0082*exp(-0250*((x-0.8)^2 + (y-0.7)^2)) +
  +0.0171*exp(-0620*((x-0.9)^2 + (y-0.7)^2)) +

  +0.0062*exp(-0450*((x-0.1)^2 + (y-0.8)^2)) +
  -0.0152*exp(-0870*((x-0.2)^2 + (y-0.8)^2)) +
  -0.0200*exp(-1750*((x-0.3)^2 + (y-0.8)^2)) +
  +0.0095*exp(-0250*((x-0.4)^2 + (y-0.8)^2)) +
  -0.0100*exp(-0600*((x-0.5)^2 + (y-0.8)^2)) +
  +0.0052*exp(-1250*((x-0.5)^2 + (y-0.8)^2)) +
  -0.0110*exp(-0400*((x-0.7)^2 + (y-0.8)^2)) +
  +0.0042*exp(-0750*((x-0.8)^2 + (y-0.8)^2)) +
  +0.0121*exp(-0120*((x-0.9)^2 + (y-0.8)^2)) +

  -0.0002*exp(-1850*((x-0.1)^2 + (y-0.9)^2)) +
  -0.0102*exp(-0850*((x-0.2)^2 + (y-0.9)^2)) +
  +0.0240*exp(-0710*((x-0.3)^2 + (y-0.9)^2)) +
  -0.0082*exp(-3850*((x-0.4)^2 + (y-0.9)^2)) +
  +0.0019*exp(-0800*((x-0.5)^2 + (y-0.9)^2)) +
  -0.0072*exp(-1150*((x-0.6)^2 + (y-0.9)^2)) +
  +0.0065*exp(-0500*((x-0.7)^2 + (y-0.9)^2)) +
  -0.0122*exp(-0450*((x-0.8)^2 + (y-0.9)^2)) +
  +0.0041*exp(-0900*((x-0.9)^2 + (y-0.9)^2)); // Initial Condition
real dt = 0.0001; // Time-Step
real T = 12.0; // Final Time

// MESH
mesh Th = square(100, 100, [0 + 1*x, 0 + 1*y]);

// FESPACE
fespace Vh(Th, P1);
Vh phiOld = phi0;
Vh phi, u;
Vh psi, v;

// MACRO
macro grad(u) [dx(u), dy(u)] //

// PROBLEM
problem CaHiOD1([psi, phi], [v, u])
    = int2d(Th)(dt * gamma * grad(psi)' * grad(v) + phi * v +
	             grad(phi)' * grad(u) - psi * u + 0.5 * fprime(phiOld) * phi * u)
    - int2d(Th)(phiOld * v +
	             0.5 * fprime(phiOld) * phiOld * u - f(phiOld) * u);

problem CaHiOD2([psi, phi], [v, u])
    = int2d(Th)(dt * gamma * grad(psi)' * grad(v) + phi * v +
 	             0.5 * grad(phi)' * grad(u) - psi * u + 0.5 * fprime(phiOld) * phi * u)
    - int2d(Th)(phiOld * v +
 	             - 0.5 * grad(phiOld)' * grad(u) + 0.5 * fprime(phiOld) * phiOld * u - f(phiOld) * u);

// TIME-STEPPING ALGORITHM
for(real t = 0; t <= T; t += dt)
{
  if(Method == "OD1"){CaHiOD1;}
  else{CaHiOD2;}
  phiOld = phi;
  if((t/dt)%100 == 0)
    {
      string FileName = "t="+t+".vtu";
      savevtk(FileName, Th, phi, dataname="Phi", order=Order);
      plot(phi, cmm="t="+t+"[sec]", wait=0, fill=1, value=1, nbiso=60);
    }
  cout<<"t="<<t<<"\n"<<endl;
}
